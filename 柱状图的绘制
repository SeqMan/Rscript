############################
#数据类型
Group	Time	Glucose
WT	0	102.6912
WT	0	81.072
WT	0	73.8656
WT	0	91.8816
WT	0	70.2624
WT	0	97.2864
WT	0	88.2784
WT	0	82.8736
WT	0	70.2624
WT	0	63.056
WT	0	84.6752
KO	0	91.8816
KO	0	131.5168
KO	0	113.5008
KO	0	73.8656
KO	0	97.2864
KO	0	79.2704
......

##################################
setwd("C:/Users/Chaoliang Xiong/Desktop/")
library(ggplot2)
data<-read.table("data.txt",header = TRUE)

##########################################
#定义函数
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
  library(plyr)
  
  # 计算长度
  length2 <- function (x, na.rm=FALSE) {
    if (na.rm) sum(!is.na(x))
    else       length(x)
  }
  
  # 以 groupvars 为组,计算每组的长度,均值,以及标准差
  # ddply 就是 dplyr 中的 group_by + summarise
  datac <- ddply(data, groupvars, .drop=.drop,
                 .fun = function(xx, col) {
                   c(N    = length2(xx[[col]], na.rm=na.rm),
                     mean = mean   (xx[[col]], na.rm=na.rm),
                     sd   = sd     (xx[[col]], na.rm=na.rm)
                   )
                 },
                 measurevar
  )
  
  # 重命名  
  datac <- plyr::rename(datac, c("mean" = measurevar))
  
  # 计算标准偏差
  datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
  
  # Confidence interval multiplier for standard error
  # Calculate t-statistic for confidence interval: 
  # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
  # 计算置信区间
  ciMult <- qt(conf.interval/2 + .5, datac$N-1)
  datac$ci <- datac$se * ciMult
  
  return(datac)
}
##################################################
#summarySE 计算标准差和标准误差以及95%的置信区间.
dataT<-summarySE(data,measurevar="weight",groupvars=c("Group","week"))

########################################
#转换为因子类型
dataT2<-dataT
dataT2$week<-factor(dataT2$week)

####################################################
#(1)Error bars represent standard error of the mean
ggplot(dataT2, aes(x=week, y=weight, fill=Group)) + 
  geom_bar(position=position_dodge(), stat="identity",
           colour="black", # Use black outlines,
           size=.3) + # Thinner lines
  geom_errorbar(aes(ymin=weight-se, ymax=weight+se),
                size=.3,    # Thinner lines
                width=.2, # 设置误差线的宽度 
                position=position_dodge(.9))+ # 对重叠的点,进行偏移处理(position_dodge(.0)表示不偏移)
  xlab("Week(w)") +
  ylab("Body weight(g)") +
  scale_fill_hue(name="Bar type", # Legend label, use darker colors
                 breaks=c("WT", "KO"),
                 labels=c("Wild Type", "Knock Out")) +
  ggtitle("The Body Weight of Different Group \nat Different Time") +
  scale_y_continuous(breaks=0:20*4) +
  guides(fill = guide_legend(reverse= TRUE))+ #图例的顺序调整
  theme_bw()

#(2)Use 95% confidence intervals instead of SEM
ggplot(dataT2, aes(x=week, y=weight, fill=Group)) + 
  geom_bar(position=position_dodge(), stat="identity",
           colour="black", # Use black outlines,
           size=.3) + # Thinner lines
  geom_errorbar(aes(ymin=weight-ci, ymax=weight+ci),
                size=.3,    # Thinner lines
                width=.2, # 设置误差线的宽度 
                position=position_dodge(.9))+ # 对重叠的点,进行偏移处理(position_dodge(.0)表示不偏移)
  xlab("Week(w)") +
  ylab("Body weight(g)") +
  scale_fill_hue(name="Bar type", # Legend label, use darker colors
                 breaks=c("WT", "KO"),
                 labels=c("Wild Type", "Knock Out")) +
  ggtitle("The Body Weight of Different Group \nat Different Time") +
  scale_y_continuous(breaks=0:20*4) +
  theme_bw()
