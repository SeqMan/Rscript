######################################
#数据类型
Group	Time	Glucose
WT	0	102.6912
WT	0	81.072
WT	0	73.8656
WT	0	91.8816
WT	0	70.2624
WT	0	97.2864
WT	0	88.2784
WT	0	82.8736
WT	0	70.2624
WT	0	63.056
WT	0	84.6752
KO	0	91.8816
KO	0	131.5168
KO	0	113.5008
KO	0	73.8656
KO	0	97.2864
KO	0	79.2704

#####################################
setwd("C:/Users/Chaoliang Xiong/Desktop/")
library(ggplot2)
data<-read.table("data.txt",header = TRUE)

#定义函数
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
  library(plyr)
  
  # 计算长度
  length2 <- function (x, na.rm=FALSE) {
    if (na.rm) sum(!is.na(x))
    else       length(x)
  }
  
  # 以 groupvars 为组,计算每组的长度,均值,以及标准差
  # ddply 就是 dplyr 中的 group_by + summarise
  datac <- ddply(data, groupvars, .drop=.drop,
                 .fun = function(xx, col) {
                   c(N    = length2(xx[[col]], na.rm=na.rm),
                     mean = mean   (xx[[col]], na.rm=na.rm),
                     sd   = sd     (xx[[col]], na.rm=na.rm)
                   )
                 },
                 measurevar
  )
  
  # 重命名  
  datac <- plyr::rename(datac, c("mean" = measurevar))
  
  # 计算标准偏差
  datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
  
  # Confidence interval multiplier for standard error
  # Calculate t-statistic for confidence interval: 
  # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
  # 计算置信区间
  ciMult <- qt(conf.interval/2 + .5, datac$N-1)
  datac$ci <- datac$se * ciMult
  
  return(datac)
}

#summarySE 计算标准差和标准误差以及95%的置信区间.
dataT<-summarySE(data,measurevar="weight",groupvars=c("Group","week"))
# dataT<-summarySE(data,measurevar="Glucose",groupvars=c("Group","Time"))
###################################

# 对重叠的点,进行偏移处理(尽管这样可以将点分开便于观看,但是个人认为这并不科学)
pd <- position_dodge(0.0) # move them .05 to the left and right

#绘制带有95%置信区间的折线图
ggplot(dataT, aes(x=week, y=weight, colour=Group,group=Group))+
  geom_errorbar(aes(ymin=weight-se, ymax=weight+se),size=0.8,width=2,position=pd)+
  geom_line(position=pd,size=1) +
  geom_point(position=pd, size=3, shape=21, fill="white") + #geom_point 放在 geom_line之后,可以保证点被最后绘制,填充为白色.# 21 is filled circle.
  xlab("week(w)") +
  ylab("Body weight(g)")+
  scale_colour_hue(name="line type",breaks=c("KO", "WT"),labels=c("Knock Out", "Wild Type"),l=40) +
  # scale_colour_manual(values = c("blue","red"))+
  ggtitle("Body weight of different group",)+
  expand_limits(y=0) +
  scale_x_continuous(breaks=5:35*1) +
  scale_y_continuous(breaks=0:60*1) + ## Set tick every 1.
  theme_bw() +#背景设为白色
  theme(legend.justification=c(1,0), #这一项很关键,如果没有这个参数,图例会偏移.
        legend.position=c(1,0), #图例的位置
        panel.grid =element_blank())#删除网格线

#ggplot(dataT, aes(x=Time, y=Glucose, colour=Group,group=Group))+
#  geom_errorbar(aes(ymin=Glucose-se, ymax=Glucose+se),size=0.8,width=2,position=pd)+
#  geom_line(position=pd,size=1) +
#  geom_point(position=pd, size=3, shape=21, fill="white") + #geom_point 放在 geom_line之后,可以保证点被最后绘制,填充为白色.# 21 is filled circle.
#  xlab("Time(min)") +
#  ylab("Blood Glucose(% of baseline)")+
#  scale_colour_hue(name="line type",breaks=c("KO", "WT"),labels=c("Knock Out", "Wild Type"),l=40) +
#  ggtitle("ITT",)+
#  expand_limits(y=0) +
#  scale_x_continuous(breaks=0:120*30) +
#  scale_y_continuous(breaks=0:100*20) + ## Set tick every 1.
#  theme_bw() +#背景设为白色
#  theme(legend.justification=c(1,0), #这一项很关键,如果没有这个参数,图例会偏移.
#        legend.position=c(1,0),panel.grid =element_blank())
